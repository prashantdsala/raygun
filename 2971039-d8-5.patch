diff --git a/config/install/raygun.settings.yml b/config/install/raygun.settings.yml
new file mode 100644
index 0000000..2acc747
--- /dev/null
+++ b/config/install/raygun.settings.yml
@@ -0,0 +1,8 @@
+raygun_apikey: ''
+raygun_async_sending: 1
+raygun_send_version: 1
+raygun_application_version: ''
+raygun_send_email: 1
+raygun_exceptions: 1
+raygun_error_handling: 1
+raygun_send_username: 1
diff --git a/config/schema/raygun.schema.yml b/config/schema/raygun.schema.yml
new file mode 100644
index 0000000..770d652
--- /dev/null
+++ b/config/schema/raygun.schema.yml
@@ -0,0 +1,20 @@
+raygun.settings:
+  type: mapping
+  label: Settings
+  mapping:
+    raygun_apikey:
+      type: string
+    raygun_async_sending:
+      type: integer
+    raygun_send_version:
+      type: integer
+    raygun_application_version:
+      type: string
+    raygun_send_email:
+      type: integer
+    raygun_exceptions:
+      type: integer
+    raygun_error_handling:
+      type: integer
+    raygun_send_username:
+      type: integer
diff --git a/raygun.info.yml b/raygun.info.yml
new file mode 100644
index 0000000..babc3ae
--- /dev/null
+++ b/raygun.info.yml
@@ -0,0 +1,5 @@
+name: 'Raygun.io integration'
+description: 'Sends errors to raygun'
+core: 8.x
+type: module
+configure: raygun.admin_form
diff --git a/raygun.install b/raygun.install
index c0a798b..359c803 100644
--- a/raygun.install
+++ b/raygun.install
@@ -6,6 +6,7 @@
  * Install, update and uninstall functions for the raygun module.
  */
 
+use Drupal\Core\Url;
 
 /**
  * Implements hook_requirements().
@@ -17,39 +18,39 @@ function raygun_requirements($phase) {
   if ($phase == 'runtime') {
     // Make sure the RaygunClient class exists.
     if (!file_exists(_raygun_get_library_path())) {
-      $requirements['raygun_library'] = array(
+      $requirements['raygun_library'] = [
         'title' => t('Raygun4Php library'),
         'value' => t('The Raygun4Php library is missing, see the README for instructions on how to download this.'),
         'severity' => REQUIREMENT_ERROR,
-      );
+      ];
     }
     else {
-      $requirements['raygun_library'] = array(
+      $requirements['raygun_library'] = [
         'title' => t('Raygun4Php library'),
         'value' => t('Found'),
         'severity' => REQUIREMENT_OK,
-      );
+      ];
     }
 
     // Check for a missing API token.
-    $apikey = trim(variable_get('raygun_apikey', ''));
+    $apikey = trim(\Drupal::config('raygun.settings')->get('raygun_apikey'));
     if (empty($apikey)) {
-      $requirements['raygun_apikey'] = array(
+      $requirements['raygun_apikey'] = [
         'title' => t('Raygun.io API key missing'),
-        'value' => t('Raygun for PHP is enabled however the API key is missing. Please <a href="!url">configure your settings</a>.', array(
-          '!url' => url('admin/config/development/raygun'),
-        )),
+        'value' => t('Raygun for PHP is enabled however the API key is missing. Please <a href="!url">configure your settings</a>.', [
+          '!url' => Url::fromRoute('raygun.admin_form'),
+        ]),
         'severity' => REQUIREMENT_ERROR,
-      );
+      ];
     }
 
     // PHP 5.3 check.
     if (version_compare(phpversion(), '5.3', '<')) {
-      $requirements['raygun_php_version'] = array(
+      $requirements['raygun_php_version'] = [
         'title' => t('Raygun4Php PHP version'),
         'value' => t('Raygun4Php library requires PHP 5.3, you will need to upgrade in order to use this module.'),
         'severity' => REQUIREMENT_ERROR,
-      );
+      ];
     }
   }
 
diff --git a/raygun.links.menu.yml b/raygun.links.menu.yml
new file mode 100644
index 0000000..ff70df8
--- /dev/null
+++ b/raygun.links.menu.yml
@@ -0,0 +1,5 @@
+raygun.admin_form:
+  route_name: raygun.admin_form
+  title: 'Raygun.io settings'
+  description: 'Make changes to your Raygun.io settings.'
+  parent: system.admin_config_development
diff --git a/raygun.module b/raygun.module
index b52694f..5efb308 100644
--- a/raygun.module
+++ b/raygun.module
@@ -6,89 +6,25 @@
  * Integrates Drupal with raygun.io for error tracking and alerting.
  */
 
+use Drupal\Core\Routing\RouteMatchInterface;
+
 /**
  * Retrieves the path to the PHP library for Raygun.io.
  */
 function _raygun_get_library_path() {
-  return DRUPAL_ROOT . '/sites/all/libraries/raygun/RaygunClient.php';
+  return \Drupal::root() . '/libraries/raygun/src/Raygun4php/RaygunClient.php';
 }
 
 /**
  * Implements hook_help().
  */
-function raygun_help($path, $arg) {
-  $output = '';
-  switch ($path) {
-    case 'admin/config/development/raygun' :
-      $output .= '<p>' . t('Integrates Drupal with <a href="!url">Raygun.io</a> for error tracking and alerting.', array(
-        '!url' => 'http://raygun.io/',
-      )) . '</p>';
-      break;
-  }
-  return $output;
-}
-
-/**
- * Implements hook_permission().
- */
-function raygun_permission() {
-  return array(
-    'administer raygun' => array(
-      'title' => t('Administer Raygun.io settings'),
-      'description' => t('Configure the settings needed to integrate with Raygun.io.'),
-    ),
-  );
-}
+function raygun_help($route_name, RouteMatchInterface $route_match) {
 
-/**
- * Implements hook_menu().
- */
-function raygun_menu() {
-  $items = array();
-  $items['admin/config/development/raygun'] = array(
-    'title' => 'Raygun.io settings',
-    'description' => 'Make changes to your Raygun.io settings.',
-    'page callback' => 'drupal_get_form',
-    'page arguments' => array('raygun_admin_form'),
-    'access arguments' => array('administer raygun'),
-    'type' => MENU_NORMAL_ITEM,
-    'file' => 'raygun.admin.inc',
-  );
-  return $items;
-}
-
-/**
- * Implements hook_boot().
- */
-function raygun_boot() {
-  $apikey = trim(variable_get('raygun_apikey', ''));
-  if (file_exists(_raygun_get_library_path()) && !empty($apikey)) {
-    global $user;
-    global $raygun_client;
+  switch ($route_name) {
+    // Main module help for the redirect_after_logout module.
+    case 'help.page.raygun':
+      return check_markup(file_get_contents(drupal_get_path('module', 'raygun') . "/README.txt"));
 
-    require_once _raygun_get_library_path();
-    $raygun_client = new \Raygun4php\RaygunClient(variable_get('raygun_apikey', ''), (bool) variable_get('raygun_async_sending', 1));
-    if (variable_get('raygun_send_version', 1) && variable_get('raygun_application_version', '') != '') {
-      $raygun_client->SetVersion(variable_get('raygun_application_version', ''));
-    }
-    if (variable_get('raygun_send_email', 1) && $user->uid) {
-      $raygun_client->SetUser($user->mail);
-    }
-    if (variable_get('raygun_exceptions', 1)) {
-      set_exception_handler('raygun_exception_handler');
-    }
-    if (variable_get('raygun_error_handling', 1)) {
-      set_error_handler('raygun_error_handler');
-    }
-    // Proxy support
-    if ($proxy_server = variable_get('proxy_server', FALSE)) {
-      if ($proxy_port = variable_get('proxy_port', FALSE)) {
-        $raygun_client->setProxy('http://' . $proxy_server . ':' . $proxy_port);
-      }
-      else {
-        $raygun_client->setProxy('http://' . $proxy_server);
-      }
-    }
   }
 }
 
diff --git a/raygun.permissions.yml b/raygun.permissions.yml
new file mode 100644
index 0000000..b409b12
--- /dev/null
+++ b/raygun.permissions.yml
@@ -0,0 +1,3 @@
+'administer raygun':
+  title: 'Administer Raygun.io settings'
+  description: 'Configure the settings needed to integrate with Raygun.io.'
diff --git a/raygun.routing.yml b/raygun.routing.yml
new file mode 100644
index 0000000..54d2e33
--- /dev/null
+++ b/raygun.routing.yml
@@ -0,0 +1,7 @@
+raygun.admin_form:
+  path: /admin/config/development/raygun
+  defaults:
+    _title: 'Raygun.io settings'
+    _form: \Drupal\raygun\Form\RaygunAdminForm
+  requirements:
+    _permission: 'administer raygun'
diff --git a/raygun.services.yml b/raygun.services.yml
new file mode 100644
index 0000000..bcd958b
--- /dev/null
+++ b/raygun.services.yml
@@ -0,0 +1,6 @@
+services:
+  boot_subscriber:
+    class: '\Drupal\raygun\EventSubscriber\BootSubscriber'
+    arguments: ['@config.factory']
+    tags:
+      - { name: 'event_subscriber' }
diff --git a/src/EventSubscriber/BootSubscriber.php b/src/EventSubscriber/BootSubscriber.php
new file mode 100644
index 0000000..c57162a
--- /dev/null
+++ b/src/EventSubscriber/BootSubscriber.php
@@ -0,0 +1,83 @@
+<?php
+/**
+ * @file
+ * Contains \Drupal\raygun\EventSubscriber\BootSubscriber.
+ */
+
+namespace Drupal\raygun\EventSubscriber;
+
+use Drupal\Core\Config\ConfigFactory;
+use Drupal\Core\Controller\ControllerBase;
+use Symfony\Component\HttpKernel\KernelEvents;
+use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+use \Symfony\Component\HttpKernel\Event\GetResponseEvent;
+
+
+/**
+ * BootSubscriber event subscriber.
+ *
+ * @package Drupal\raygun\EventSubscriber
+ */
+class BootSubscriber extends ControllerBase implements EventSubscriberInterface {
+
+  /**
+   * The config factory.
+   *
+   * @var \Drupal\Core\Config\ConfigFactory
+   */
+  protected $configFactory;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function __construct(ConfigFactory $configFactory) {
+    $this->configFactory = $configFactory;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function getSubscribedEvents() {
+    return [KernelEvents::REQUEST => ['onEvent', 0]];
+  }
+
+  public function onEvent(GetResponseEvent $event) {
+    $config = $this->configFactory->get('raygun.settings');
+    $apikey = trim($config->get('raygun_apikey'));
+    if (file_exists(_raygun_get_library_path()) && !empty($apikey)) {
+      $user = \Drupal::currentUser();
+      global $raygun_client;
+
+      require_once _raygun_get_library_path();
+      $raygun_client = new \Raygun4php\RaygunClient($config->get('raygun_apikey'), (bool) $config->get('raygun_async_sending'));
+
+      if ($config->get('raygun_send_version') && $config->get('raygun_application_version') != '') {
+        $raygun_client->SetVersion($config->get('raygun_application_version'));
+      }
+      if ($config->get('raygun_send_email') && $user->id()) {
+        $raygun_client->SetUser($user->getEmail());
+      }
+      if ($config->get('raygun_exceptions')) {
+        set_exception_handler('raygun_exception_handler');
+      }
+      if ($config->get('raygun_error_handling')) {
+        set_error_handler('raygun_error_handler');
+      }
+      // Proxy support
+      // @FIXME
+      // // @FIXME
+      // // This looks like another module's variable. You'll need to rewrite this call
+      // // to ensure that it uses the correct configuration object.
+      // if ($proxy_server = variable_get('proxy_server', FALSE)) {
+      //       if ($proxy_port = variable_get('proxy_port', FALSE)) {
+      //         $raygun_client->setProxy('http://' . $proxy_server . ':' . $proxy_port);
+      //       }
+      //       else {
+      //         $raygun_client->setProxy('http://' . $proxy_server);
+      //       }
+      //     }
+
+    }
+  }
+
+}
diff --git a/src/Form/RaygunAdminForm.php b/src/Form/RaygunAdminForm.php
new file mode 100644
index 0000000..47ada01
--- /dev/null
+++ b/src/Form/RaygunAdminForm.php
@@ -0,0 +1,142 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\raygun\Form\RaygunAdminForm.
+ */
+
+namespace Drupal\raygun\Form;
+
+use Drupal\Core\Form\ConfigFormBase;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Render\Element;
+
+class RaygunAdminForm extends ConfigFormBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFormId() {
+    return 'raygun_admin_form';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getEditableConfigNames() {
+    return ['raygun.settings'];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildForm(array $form, FormStateInterface $form_state) {
+
+    $form['common'] = [
+      '#type' => 'fieldset',
+      '#title' => $this->t('Common'),
+      '#collapsible' => FALSE,
+      '#collapsed' => FALSE,
+    ];
+    $form['common']['raygun_apikey'] = [
+      '#type' => 'textfield',
+      '#required' => TRUE,
+      '#title' => $this->t('API key'),
+      '#description' => $this->t('Raygun.io API key for the application.'),
+      '#default_value' => $this->config('raygun.settings')->get('raygun_apikey'),
+    ];
+    $form['common']['raygun_async_sending'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Use asynchronous sending'),
+      '#description' => $this->t('If checked, the message will be sent asynchronously. This provides a great speedup versus the older cURL method. On some environments (e.g. Windows), you might be forced to uncheck this.'),
+      '#default_value' => $this->config('raygun.settings')->get('raygun_async_sending'),
+    ];
+    $form['common']['raygun_send_version'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Send application version'),
+      '#description' => $this->t('If checked, all error messages to Raygun.io will include your application version that is currently running. This is optional but recommended as the version number is considered to be first-class data for a message.'),
+      '#default_value' => $this->config('raygun.settings')->get('raygun_send_version'),
+    ];
+    $form['common']['raygun_application_version'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Application version'),
+      '#description' => $this->t('What is the current version of your Drupal application. This can be any string or number or even a git commit hash.'),
+      '#default_value' => $this->config('raygun.settings')->get('raygun_application_version'),
+      '#states' => [
+        'invisible' => [
+          ':input[name="raygun_send_version"]' => [
+            'checked' => FALSE
+            ]
+          ]
+        ],
+    ];
+    $form['common']['raygun_send_email'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Send current user email'),
+      '#description' => $this->t('If checked, all error messages to Raygun.io will include the current email address of any logged in users.  This is optional - if it is not checked, a random identifier will be used.'),
+      '#default_value' => $this->config('raygun.settings')->get('raygun_send_email'),
+    ];
+
+
+    $form['php'] = [
+      '#type' => 'fieldset',
+      '#title' => $this->t('PHP'),
+      '#collapsible' => TRUE,
+      '#collapsed' => FALSE,
+    ];
+    $form['php']['raygun_exceptions'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Register global exception handler'),
+      '#default_value' => $this->config('raygun.settings')->get('raygun_exceptions'),
+    ];
+    $form['php']['raygun_error_handling'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Register global error handler'),
+      '#default_value' => $this->config('raygun.settings')->get('raygun_error_handling'),
+    ];
+
+    return parent::buildForm($form, $form_state);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function validateForm(array &$form, FormStateInterface $form_state) {
+    $values = $form_state->getValues();
+
+    // Simple API key pattern matching.
+    // @TODO confirm that this is the correct pattern for all accounts.
+    if (!preg_match("/^[0-9a-zA-Z\+\/]{22}==$/", $values['raygun_apikey'])) {
+      $form_state->setErrorByName('raygun_apikey', $this->t('You must specify a valid Raygun.io API key. You can find this on your dashboard.'));
+    }
+
+    $application_version = trim($values['raygun_application_version']);
+    if ($values['raygun_send_version'] && empty($application_version)) {
+      $form_state->setErrorByName('raygun_application_version', $this->t('You must specify an application version if you are going to send this.'));
+    }
+
+    parent::validateForm($form, $form_state);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    $config = $this->config('raygun.settings');
+
+    $config->set('raygun_apikey', $form_state->getValue('raygun_apikey'));
+    $config->set('raygun_async_sending', $form_state->getValue('raygun_async_sending'));
+    $config->set('raygun_send_version', $form_state->getValue('raygun_send_version'));
+    $config->set('raygun_application_version', $form_state->getValue('raygun_application_version'));
+    $config->set('raygun_send_email', $form_state->getValue('raygun_send_email'));
+    $config->set('raygun_exceptions', $form_state->getValue('raygun_exceptions'));
+    $config->set('raygun_error_handling', $form_state->getValue('raygun_error_handling'));
+    $config->set('raygun_send_username', $form_state->getValue('raygun_send_username'));
+
+    $config->save();
+
+    parent::submitForm($form, $form_state);
+  }
+
+}
+?>
