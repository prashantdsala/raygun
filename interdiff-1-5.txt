1,38d0
< diff --git a/README.txt b/README.txt
< new file mode 100644
< index 0000000..babac33
< --- /dev/null
< +++ b/README.txt
< @@ -0,0 +1,32 @@
< +Raygun.io
< +=========
< +
< +Allows all errors and exceptions to be sent to Raygun.io so they are tracked on
< +their dashboard. For the full feature list see the feature list page on
< +http://raygun.io/features.
< +
< +Module features
< +---------------
< +
< +* Simple one stop configuration screen
< +* No coding required
< +* Can take over the PHP error and exception handler to catch all errors
< +* hook_requirements() integration to ensure you have downloaded the Raygun4Php
< +  library
< +
< +Module requirements
< +-------------------
< +
< +* You have an API key for your application at Raygun.io
< +* PHP 5.3+
< +* You have downloaded the raygun4php library (found at
< +  https://github.com/MindscapeHQ/raygun4php) to your `sites/all/libraries`
< +  directory under a sub folder `raygun`.
< +
< +  The directory should look like:
< +
< +  sites/all/libraries
< +  -- raygun
< +  ---- RaygunClient.php
< +  ---- RaygunEnvironmentMessage.php
< +  ...
81c43
< index 0000000..5261de8
---
> index 0000000..babc3ae
84,85c46,47
< @@ -0,0 +1,4 @@
< +name: 'Raygun.io integration '
---
> @@ -0,0 +1,5 @@
> +name: 'Raygun.io integration'
88a51
> +configure: raygun.admin_form
90,92c53,54
< new file mode 100644
< index 0000000..48f8659
< --- /dev/null
---
> index c0a798b..359c803 100644
> --- a/raygun.install
94,128c56,87
< @@ -0,0 +1,60 @@
< +<?php
< +
< +/**
< + * @file raygun.install
< + *
< + * Install, update and uninstall functions for the raygun module.
< + */
< +
< +
< +/**
< + * Implements hook_requirements().
< + *
< + * We'll use this to detect all the requirements for the module are in place.
< + */
< +function raygun_requirements($phase) {
< +  $requirements = array();
< +  if ($phase == 'runtime') {
< +    // Make sure the RaygunClient class exists.
< +    if (!file_exists(_raygun_get_library_path())) {
< +      $requirements['raygun_library'] = array(
< +        'title' => t('Raygun4Php library'),
< +        'value' => t('The Raygun4Php library is missing, see the README for instructions on how to download this.'),
< +        'severity' => REQUIREMENT_ERROR,
< +      );
< +    }
< +    else {
< +      $requirements['raygun_library'] = array(
< +        'title' => t('Raygun4Php library'),
< +        'value' => t('Found'),
< +        'severity' => REQUIREMENT_OK,
< +      );
< +    }
< +
< +    // Check for a missing API token.
---
> @@ -6,6 +6,7 @@
>   * Install, update and uninstall functions for the raygun module.
>   */
>  
> +use Drupal\Core\Url;
>  
>  /**
>   * Implements hook_requirements().
> @@ -17,39 +18,39 @@ function raygun_requirements($phase) {
>    if ($phase == 'runtime') {
>      // Make sure the RaygunClient class exists.
>      if (!file_exists(_raygun_get_library_path())) {
> -      $requirements['raygun_library'] = array(
> +      $requirements['raygun_library'] = [
>          'title' => t('Raygun4Php library'),
>          'value' => t('The Raygun4Php library is missing, see the README for instructions on how to download this.'),
>          'severity' => REQUIREMENT_ERROR,
> -      );
> +      ];
>      }
>      else {
> -      $requirements['raygun_library'] = array(
> +      $requirements['raygun_library'] = [
>          'title' => t('Raygun4Php library'),
>          'value' => t('Found'),
>          'severity' => REQUIREMENT_OK,
> -      );
> +      ];
>      }
>  
>      // Check for a missing API token.
> -    $apikey = trim(variable_get('raygun_apikey', ''));
130,154c89,115
< +    if (empty($apikey)) {
< +      // @FIXME
< +// url() expects a route name or an external URI.
< +// $requirements['raygun_apikey'] = array(
< +//         'title' => t('Raygun.io API key missing'),
< +//         'value' => t('Raygun for PHP is enabled however the API key is missing. Please <a href="!url">configure your settings</a>.', array(
< +//           '!url' => url('admin/config/development/raygun'),
< +//         )),
< +//         'severity' => REQUIREMENT_ERROR,
< +//       );
< +
< +    }
< +
< +    // PHP 5.3 check.
< +    if (version_compare(phpversion(), '5.3', '<')) {
< +      $requirements['raygun_php_version'] = array(
< +        'title' => t('Raygun4Php PHP version'),
< +        'value' => t('Raygun4Php library requires PHP 5.3, you will need to upgrade in order to use this module.'),
< +        'severity' => REQUIREMENT_ERROR,
< +      );
< +    }
< +  }
< +
< +  return $requirements;
< +}
---
>      if (empty($apikey)) {
> -      $requirements['raygun_apikey'] = array(
> +      $requirements['raygun_apikey'] = [
>          'title' => t('Raygun.io API key missing'),
> -        'value' => t('Raygun for PHP is enabled however the API key is missing. Please <a href="!url">configure your settings</a>.', array(
> -          '!url' => url('admin/config/development/raygun'),
> -        )),
> +        'value' => t('Raygun for PHP is enabled however the API key is missing. Please <a href="!url">configure your settings</a>.', [
> +          '!url' => Url::fromRoute('raygun.admin_form'),
> +        ]),
>          'severity' => REQUIREMENT_ERROR,
> -      );
> +      ];
>      }
>  
>      // PHP 5.3 check.
>      if (version_compare(phpversion(), '5.3', '<')) {
> -      $requirements['raygun_php_version'] = array(
> +      $requirements['raygun_php_version'] = [
>          'title' => t('Raygun4Php PHP version'),
>          'value' => t('Raygun4Php library requires PHP 5.3, you will need to upgrade in order to use this module.'),
>          'severity' => REQUIREMENT_ERROR,
> -      );
> +      ];
>      }
>    }
>  
167,169c128,129
< new file mode 100644
< index 0000000..511d581
< --- /dev/null
---
> index b52694f..5efb308 100644
> --- a/raygun.module
171,285c131,228
< @@ -0,0 +1,114 @@
< +<?php
< +
< +/**
< + * @file raygun.module
< + *
< + * Integrates Drupal with raygun.io for error tracking and alerting.
< + */
< +
< +/**
< + * Retrieves the path to the PHP library for Raygun.io.
< + */
< +function _raygun_get_library_path() {
< +  return \Drupal::root() . '/sites/all/libraries/raygun/RaygunClient.php';
< +}
< +
< +/**
< + * Implements hook_help().
< + */
< +function raygun_help($path, $arg) {
< +  $output = '';
< +  switch ($path) {
< +    case 'admin/config/development/raygun' :
< +      $output .= '<p>' . t('Integrates Drupal with <a href="!url">Raygun.io</a> for error tracking and alerting.', array(
< +        '!url' => 'http://raygun.io/',
< +      )) . '</p>';
< +      break;
< +  }
< +  return $output;
< +}
< +
< +/**
< + * Implements hook_permission().
< + */
< +function raygun_permission() {
< +  return array(
< +    'administer raygun' => array(
< +      'title' => t('Administer Raygun.io settings'),
< +      'description' => t('Configure the settings needed to integrate with Raygun.io.'),
< +    ),
< +  );
< +}
< +
< +/**
< + * Implements hook_menu().
< + */
< +function raygun_menu() {
< +  $items = array();
< +  $items['admin/config/development/raygun'] = array(
< +    'title' => 'Raygun.io settings',
< +    'description' => 'Make changes to your Raygun.io settings.',
< +    'page callback' => 'drupal_get_form',
< +    'page arguments' => array('raygun_admin_form'),
< +    'access arguments' => array('administer raygun'),
< +    'type' => MENU_NORMAL_ITEM,
< +    'file' => 'raygun.admin.inc',
< +  );
< +  return $items;
< +}
< +
< +/**
< + * Implements hook_boot().
< + */
< +function raygun_boot() {
< +  $apikey = trim(\Drupal::config('raygun.settings')->get('raygun_apikey'));
< +  if (file_exists(_raygun_get_library_path()) && !empty($apikey)) {
< +    $user = \Drupal::currentUser();
< +    global $raygun_client;
< +
< +    require_once _raygun_get_library_path();
< +    $raygun_client = new \Raygun4php\RaygunClient(\Drupal::config('raygun.settings')->get('raygun_apikey'), (bool) \Drupal::config('raygun.settings')->get('raygun_async_sending'));
< +    if (\Drupal::config('raygun.settings')->get('raygun_send_version') && \Drupal::config('raygun.settings')->get('raygun_application_version') != '') {
< +      $raygun_client->SetVersion(\Drupal::config('raygun.settings')->get('raygun_application_version'));
< +    }
< +    if (\Drupal::config('raygun.settings')->get('raygun_send_email') && $user->uid) {
< +      $raygun_client->SetUser($user->mail);
< +    }
< +    if (\Drupal::config('raygun.settings')->get('raygun_exceptions')) {
< +      set_exception_handler('raygun_exception_handler');
< +    }
< +    if (\Drupal::config('raygun.settings')->get('raygun_error_handling')) {
< +      set_error_handler('raygun_error_handler');
< +    }
< +    // Proxy support
< +    // @FIXME
< +// // @FIXME
< +// // This looks like another module's variable. You'll need to rewrite this call
< +// // to ensure that it uses the correct configuration object.
< +// if ($proxy_server = variable_get('proxy_server', FALSE)) {
< +//       if ($proxy_port = variable_get('proxy_port', FALSE)) {
< +//         $raygun_client->setProxy('http://' . $proxy_server . ':' . $proxy_port);
< +//       }
< +//       else {
< +//         $raygun_client->setProxy('http://' . $proxy_server);
< +//       }
< +//     }
< +
< +  }
< +}
< +
< +/**
< + * Error handler for Raygun.io.
< + */
< +function raygun_error_handler($errno, $errstr, $errfile, $errline ) {
< +  global $raygun_client;
< +  $raygun_client->SendError($errno, $errstr, $errfile, $errline);
< +}
< +
< +/**
< + * Exception handler for Raygun.io.
< + */
< +function raygun_exception_handler($exception) {
< +  global $raygun_client;
< +  $raygun_client->SendException($exception);
< +}
---
> @@ -6,89 +6,25 @@
>   * Integrates Drupal with raygun.io for error tracking and alerting.
>   */
>  
> +use Drupal\Core\Routing\RouteMatchInterface;
> +
>  /**
>   * Retrieves the path to the PHP library for Raygun.io.
>   */
>  function _raygun_get_library_path() {
> -  return DRUPAL_ROOT . '/sites/all/libraries/raygun/RaygunClient.php';
> +  return \Drupal::root() . '/libraries/raygun/src/Raygun4php/RaygunClient.php';
>  }
>  
>  /**
>   * Implements hook_help().
>   */
> -function raygun_help($path, $arg) {
> -  $output = '';
> -  switch ($path) {
> -    case 'admin/config/development/raygun' :
> -      $output .= '<p>' . t('Integrates Drupal with <a href="!url">Raygun.io</a> for error tracking and alerting.', array(
> -        '!url' => 'http://raygun.io/',
> -      )) . '</p>';
> -      break;
> -  }
> -  return $output;
> -}
> -
> -/**
> - * Implements hook_permission().
> - */
> -function raygun_permission() {
> -  return array(
> -    'administer raygun' => array(
> -      'title' => t('Administer Raygun.io settings'),
> -      'description' => t('Configure the settings needed to integrate with Raygun.io.'),
> -    ),
> -  );
> -}
> +function raygun_help($route_name, RouteMatchInterface $route_match) {
>  
> -/**
> - * Implements hook_menu().
> - */
> -function raygun_menu() {
> -  $items = array();
> -  $items['admin/config/development/raygun'] = array(
> -    'title' => 'Raygun.io settings',
> -    'description' => 'Make changes to your Raygun.io settings.',
> -    'page callback' => 'drupal_get_form',
> -    'page arguments' => array('raygun_admin_form'),
> -    'access arguments' => array('administer raygun'),
> -    'type' => MENU_NORMAL_ITEM,
> -    'file' => 'raygun.admin.inc',
> -  );
> -  return $items;
> -}
> -
> -/**
> - * Implements hook_boot().
> - */
> -function raygun_boot() {
> -  $apikey = trim(variable_get('raygun_apikey', ''));
> -  if (file_exists(_raygun_get_library_path()) && !empty($apikey)) {
> -    global $user;
> -    global $raygun_client;
> +  switch ($route_name) {
> +    // Main module help for the redirect_after_logout module.
> +    case 'help.page.raygun':
> +      return check_markup(file_get_contents(drupal_get_path('module', 'raygun') . "/README.txt"));
>  
> -    require_once _raygun_get_library_path();
> -    $raygun_client = new \Raygun4php\RaygunClient(variable_get('raygun_apikey', ''), (bool) variable_get('raygun_async_sending', 1));
> -    if (variable_get('raygun_send_version', 1) && variable_get('raygun_application_version', '') != '') {
> -      $raygun_client->SetVersion(variable_get('raygun_application_version', ''));
> -    }
> -    if (variable_get('raygun_send_email', 1) && $user->uid) {
> -      $raygun_client->SetUser($user->mail);
> -    }
> -    if (variable_get('raygun_exceptions', 1)) {
> -      set_exception_handler('raygun_exception_handler');
> -    }
> -    if (variable_get('raygun_error_handling', 1)) {
> -      set_error_handler('raygun_error_handler');
> -    }
> -    // Proxy support
> -    if ($proxy_server = variable_get('proxy_server', FALSE)) {
> -      if ($proxy_port = variable_get('proxy_port', FALSE)) {
> -        $raygun_client->setProxy('http://' . $proxy_server . ':' . $proxy_port);
> -      }
> -      else {
> -        $raygun_client->setProxy('http://' . $proxy_server);
> -      }
> -    }
>    }
>  }
>  
310c253
< index 0000000..fbc4234
---
> index 0000000..bcd958b
316c259,260
< +    class: Drupal\raygun\EventSubscriber\BootSubscriber
---
> +    class: '\Drupal\raygun\EventSubscriber\BootSubscriber'
> +    arguments: ['@config.factory']
318,319c262
< +      -
< +        name: event_subscriber
---
> +      - { name: 'event_subscriber' }
322c265
< index 0000000..3089026
---
> index 0000000..c57162a
325,326c268,270
< @@ -0,0 +1,52 @@
< +<?php /**
---
> @@ -0,0 +1,83 @@
> +<?php
> +/**
332a277,278
> +use Drupal\Core\Config\ConfigFactory;
> +use Drupal\Core\Controller\ControllerBase;
334a281,282
> +use \Symfony\Component\HttpKernel\Event\GetResponseEvent;
> +
336c284,303
< +class BootSubscriber implements EventSubscriberInterface {
---
> +/**
> + * BootSubscriber event subscriber.
> + *
> + * @package Drupal\raygun\EventSubscriber
> + */
> +class BootSubscriber extends ControllerBase implements EventSubscriberInterface {
> +
> +  /**
> +   * The config factory.
> +   *
> +   * @var \Drupal\Core\Config\ConfigFactory
> +   */
> +  protected $configFactory;
> +
> +  /**
> +   * {@inheritdoc}
> +   */
> +  public function __construct(ConfigFactory $configFactory) {
> +    $this->configFactory = $configFactory;
> +  }
345,346c312,314
< +  public function onEvent(\Symfony\Component\HttpKernel\Event\GetResponseEvent $event) {
< +    $apikey = trim(variable_get('raygun_apikey', ''));
---
> +  public function onEvent(GetResponseEvent $event) {
> +    $config = $this->configFactory->get('raygun.settings');
> +    $apikey = trim($config->get('raygun_apikey'));
352,354c320,323
< +      $raygun_client = new \Raygun4php\RaygunClient(variable_get('raygun_apikey', ''), (bool) variable_get('raygun_async_sending', 1));
< +      if (variable_get('raygun_send_version', 1) && variable_get('raygun_application_version', '') != '') {
< +        $raygun_client->SetVersion(variable_get('raygun_application_version', ''));
---
> +      $raygun_client = new \Raygun4php\RaygunClient($config->get('raygun_apikey'), (bool) $config->get('raygun_async_sending'));
> +
> +      if ($config->get('raygun_send_version') && $config->get('raygun_application_version') != '') {
> +        $raygun_client->SetVersion($config->get('raygun_application_version'));
356,357c325,326
< +      if (variable_get('raygun_send_email', 1) && $user->uid) {
< +        $raygun_client->SetUser($user->mail);
---
> +      if ($config->get('raygun_send_email') && $user->id()) {
> +        $raygun_client->SetUser($user->getEmail());
359c328
< +      if (variable_get('raygun_exceptions', 1)) {
---
> +      if ($config->get('raygun_exceptions')) {
362c331
< +      if (variable_get('raygun_error_handling', 1)) {
---
> +      if ($config->get('raygun_error_handling')) {
366,373c335,347
< +      if ($proxy_server = variable_get('proxy_server', FALSE)) {
< +        if ($proxy_port = variable_get('proxy_port', FALSE)) {
< +          $raygun_client->setProxy('http://' . $proxy_server . ':' . $proxy_port);
< +        }
< +        else {
< +          $raygun_client->setProxy('http://' . $proxy_server);
< +        }
< +      }
---
> +      // @FIXME
> +      // // @FIXME
> +      // // This looks like another module's variable. You'll need to rewrite this call
> +      // // to ensure that it uses the correct configuration object.
> +      // if ($proxy_server = variable_get('proxy_server', FALSE)) {
> +      //       if ($proxy_port = variable_get('proxy_port', FALSE)) {
> +      //         $raygun_client->setProxy('http://' . $proxy_server . ':' . $proxy_port);
> +      //       }
> +      //       else {
> +      //         $raygun_client->setProxy('http://' . $proxy_server);
> +      //       }
> +      //     }
> +
380c354
< index 0000000..307465e
---
> index 0000000..47ada01
383c357
< @@ -0,0 +1,133 @@
---
> @@ -0,0 +1,142 @@
409,421c383,384
< +  public function submitForm(array &$form, FormStateInterface $form_state) {
< +    $config = $this->config('raygun.settings');
< +
< +    foreach (Element::children($form) as $variable) {
< +      $config->set($variable, $form_state->getValue($form[$variable]['#parents']));
< +    }
< +    $config->save();
< +
< +    if (method_exists($this, '_submitForm')) {
< +      $this->_submitForm($form, $form_state);
< +    }
< +
< +    parent::submitForm($form, $form_state);
---
> +  protected function getEditableConfigNames() {
> +    return ['raygun.settings'];
427,431c390
< +  protected function getEditableConfigNames() {
< +    return ['raygun.settings'];
< +  }
< +
< +  public function buildForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state) {
---
> +  public function buildForm(array $form, FormStateInterface $form_state) {
435c394
< +      '#title' => t('Common'),
---
> +      '#title' => $this->t('Common'),
442,444c401,403
< +      '#title' => t('API key'),
< +      '#description' => t('Raygun.io API key for the application.'),
< +      '#default_value' => variable_get('raygun_apikey', ''),
---
> +      '#title' => $this->t('API key'),
> +      '#description' => $this->t('Raygun.io API key for the application.'),
> +      '#default_value' => $this->config('raygun.settings')->get('raygun_apikey'),
448,450c407,409
< +      '#title' => t('Use asynchronous sending'),
< +      '#description' => t('If checked, the message will be sent asynchronously. This provides a great speedup versus the older cURL method. On some environments (e.g. Windows), you might be forced to uncheck this.'),
< +      '#default_value' => variable_get('raygun_async_sending', 1),
---
> +      '#title' => $this->t('Use asynchronous sending'),
> +      '#description' => $this->t('If checked, the message will be sent asynchronously. This provides a great speedup versus the older cURL method. On some environments (e.g. Windows), you might be forced to uncheck this.'),
> +      '#default_value' => $this->config('raygun.settings')->get('raygun_async_sending'),
454,456c413,415
< +      '#title' => t('Send application version'),
< +      '#description' => t('If checked, all error messages to Raygun.io will include your application version that is currently running. This is optional but recommended as the version number is considered to be first-class data for a message.'),
< +      '#default_value' => variable_get('raygun_send_version', 1),
---
> +      '#title' => $this->t('Send application version'),
> +      '#description' => $this->t('If checked, all error messages to Raygun.io will include your application version that is currently running. This is optional but recommended as the version number is considered to be first-class data for a message.'),
> +      '#default_value' => $this->config('raygun.settings')->get('raygun_send_version'),
460,462c419,421
< +      '#title' => t('Application version'),
< +      '#description' => t('What is the current version of your Drupal application. This can be any string or number or even a git commit hash.'),
< +      '#default_value' => variable_get('raygun_application_version', ''),
---
> +      '#title' => $this->t('Application version'),
> +      '#description' => $this->t('What is the current version of your Drupal application. This can be any string or number or even a git commit hash.'),
> +      '#default_value' => $this->config('raygun.settings')->get('raygun_application_version'),
473,475c432,434
< +      '#title' => t('Send current user email'),
< +      '#description' => t('If checked, all error messages to Raygun.io will include the current email address of any logged in users.  This is optional - if it is not checked, a random identifier will be used.'),
< +      '#default_value' => variable_get('raygun_send_username', 1),
---
> +      '#title' => $this->t('Send current user email'),
> +      '#description' => $this->t('If checked, all error messages to Raygun.io will include the current email address of any logged in users.  This is optional - if it is not checked, a random identifier will be used.'),
> +      '#default_value' => $this->config('raygun.settings')->get('raygun_send_email'),
481c440
< +      '#title' => t('PHP'),
---
> +      '#title' => $this->t('PHP'),
487,488c446,447
< +      '#title' => t('Register global exception handler'),
< +      '#default_value' => variable_get('raygun_exceptions', 1),
---
> +      '#title' => $this->t('Register global exception handler'),
> +      '#default_value' => $this->config('raygun.settings')->get('raygun_exceptions'),
492,493c451,452
< +      '#title' => t('Register global error handler'),
< +      '#default_value' => variable_get('raygun_error_handling', 1),
---
> +      '#title' => $this->t('Register global error handler'),
> +      '#default_value' => $this->config('raygun.settings')->get('raygun_error_handling'),
496d454
< +    $form['#validate'][] = 'raygun_admin_form_validate';
500c458,461
< +  public function validateForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
---
> +  /**
> +   * {@inheritdoc}
> +   */
> +  public function validateForm(array &$form, FormStateInterface $form_state) {
506c467
< +      $form_state->setErrorByName('raygun_apikey', t('You must specify a valid Raygun.io API key. You can find this on your dashboard.'));
---
> +      $form_state->setErrorByName('raygun_apikey', $this->t('You must specify a valid Raygun.io API key. You can find this on your dashboard.'));
511c472
< +      $form_state->setErrorByName('raygun_application_version', t('You must specify an application version if you are going to send this.'));
---
> +      $form_state->setErrorByName('raygun_application_version', $this->t('You must specify an application version if you are going to send this.'));
512a474,495
> +
> +    parent::validateForm($form, $form_state);
> +  }
> +
> +  /**
> +   * {@inheritdoc}
> +   */
> +  public function submitForm(array &$form, FormStateInterface $form_state) {
> +    $config = $this->config('raygun.settings');
> +
> +    $config->set('raygun_apikey', $form_state->getValue('raygun_apikey'));
> +    $config->set('raygun_async_sending', $form_state->getValue('raygun_async_sending'));
> +    $config->set('raygun_send_version', $form_state->getValue('raygun_send_version'));
> +    $config->set('raygun_application_version', $form_state->getValue('raygun_application_version'));
> +    $config->set('raygun_send_email', $form_state->getValue('raygun_send_email'));
> +    $config->set('raygun_exceptions', $form_state->getValue('raygun_exceptions'));
> +    $config->set('raygun_error_handling', $form_state->getValue('raygun_error_handling'));
> +    $config->set('raygun_send_username', $form_state->getValue('raygun_send_username'));
> +
> +    $config->save();
> +
> +    parent::submitForm($form, $form_state);
